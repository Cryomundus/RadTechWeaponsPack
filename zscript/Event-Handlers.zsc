//////////////////////////////////////////////////////////////////////
//                                                                  //
//  credits to FDA for coding the RadTech weapon spawner framework  //
//                                                                  //
//////////////////////////////////////////////////////////////////////



// Struct for itemspawn information. 
class RTSpawnItem play
{
	string    		           spawnname;            // ID by string for spawner
	Array<RTSpawnItemEntry>    spawnreplaces;        // ID by string for spawnees
	int 	                   spawnreplacessize;    // Cached size of the above array
	bool                       isPersistent;         // Whether or not to persistently spawn.
	bool					   replaceitem;
}

class RTSpawnItemEntry play
{
	string name;
	int    chance;
}

// Struct for passing useinformation to ammunition. 
class RTSpawnAmmo play
{
	string		  ammoname;		   // ID by string for the header ammo.
	Array<string> weaponnames;     // ID by string for weapons using that ammo.
	int           weaponnamessize; // Cached size of the above array
}



// One handler to rule them all. 
class RadTechHandler : EventHandler
{

	// List of persistent classes to completely ignore. 
	// This -should- mean this mod has no performance impact. 
	static const class<actor> blacklist[] =
	{
		"HDSmoke",
		"BloodTrail",
		"CheckPuff",
		"WallChunk",
		"HDBulletPuff",
		"HDFireballTail",
		"ReverseImpBallTail",
		"HDSmokeChunk",
		"ShieldSpark",
		"HDFlameRed",
		"HDMasterBlood",
		"PlantBit",
		"HDBulletActor",
		"HDLadderSection"
	};

	// List of weapon-ammo associations.
	// Used for ammo-use association on ammo spawn (happens very often). 
	array<RTSpawnAmmo> ammospawnlist;
	int ammospawnlistsize;
	
	// List of item-spawn associations.
	// used for item-replacement on mapload. 
	array<RTSpawnItem> itemspawnlist;
	int itemspawnlistsize;
	
	
	// appends an entry to itemspawnlist;
	void additem(string name, Array<RTSpawnItemEntry> replacees, bool persists, bool rep=true)
	{
		// Creates a new struct;
		RTSpawnItem spawnee = RTSpawnItem(new('RTSpawnItem'));
		
		// Populates the struct with relevant information,
		spawnee.spawnname = name;
		spawnee.isPersistent = persists;
		spawnee.replaceitem = rep;
		for(int i = 0; i < replacees.size(); i++)
		{
			spawnee.spawnreplaces.push(replacees[i]);
			spawnee.spawnreplacessize++;
		}
		
		// Pushes the finished struct to the array. 
		itemspawnlist.push(spawnee);
		itemspawnlistsize++;
	}


	RTSpawnItemEntry additementry(string name, int chance)
	{
		// Creates a new struct;
		RTSpawnItemEntry spawnee = RTSpawnItemEntry(new('RTSpawnItemEntry'));
		spawnee.name = name.makelower();
		spawnee.chance = chance;
		return spawnee;
		
	}


	// appends an entry to ammospawnlist;
	void addammo(string name, Array<string> weapons)
	{
	
		// Creates a new struct;
		RTSpawnAmmo spawnee = RTSpawnAmmo(new('RTSpawnAmmo'));
		spawnee.ammoname = name.makelower();
		
		// Populates the struct with relevant information,
		for(int i = 0; i < weapons.size(); i++)
		{
			spawnee.weaponnames.push(weapons[i].makelower());
			spawnee.weaponnamessize++;
		}
		
		// Pushes the finished struct to the array. 
		ammospawnlist.push(spawnee);
		ammospawnlistsize++;
	}

	bool cvarsAvailable;
	
	// Populates the replacement and association arrays. 
	void init()
	{
		cvarsAvailable = true;

		// --------------------
		// Ammo and Magazine Association
		// --------------------
	
		// HDBattery. 
		Array<string> wep_battery;  
		wep_battery.push("PlasmaBuster");
		wep_battery.push("MinervaChaingun");
		addammo('HDBattery', wep_battery);
		
		// 12ga Flare Ammo. 
		Array<string> wep_flare;  
		wep_flare.push("FireBlooper"); 
		wep_flare.push("MetalFireBlooper"); 
		addammo('HDFlareAmmo', wep_flare);	

		// 12 gauge (normal) Ammo. 
		Array<string> wep_12ga;  
		wep_12ga.push("FireBlooper"); 
		wep_12ga.push("MetalFireBlooper");
		wep_12ga.push("HDCombatShotgun");
		wep_12ga.push("DoomHunter");
		addammo('HDShellAmmo', wep_12ga);	
		
		// 12 gauge (less lethal) ammo.
		Array<string> wep_12gall;
		wep_12gall.push("LLHunter");
		addammo("HDLLShellAmmo", wep_12gall);

		// 12 gauge (explosive) ammo.
		Array<string> wep_12gaex;
		wep_12gaex.push("ExplosiveHunter");
		wep_12gaex.push("MetalFireBlooper");
		addammo("HDExplosiveShellAmmo", wep_12gaex);
				
		// 10mm ammo
		Array<string> wep_10mm;  
		wep_10mm.push("HD10mmPistol"); 
		wep_10mm.push("HDSigcow");
		wep_10mm.push("TenMilAutoReloadingThingy");
		addammo ('HD10mAmmo', wep_10mm);

		// 10mm ammo (brass)
		Array<string> wep_10mmbrass;  
		wep_10mmbrass.push("TenMilAutoReloadingThingy");
		addammo ('TenMilBrass', wep_10mmbrass);

		// 4mm 'volt caseless'
		Array<string> wep_4mmvolt;
		wep_4mmvolt.push("HackedZM66AssaultRifle");
		addammo('FourMilAmmo', wep_4mmvolt);	
		
		// Volt 4mm Magazines
		Array<string> wep_4mmvolt50;
		wep_4mmvolt50.push("HackedZM66AssaultRifle");
		addammo('HD4mMag', wep_4mmvolt50);
			
		// Rocket (Gyro) Grenades.
		Array<string> wep_rocket;
		wep_rocket.push("HackedZM66AssaultRifle");
		addammo('HDRocketAmmo', wep_rocket);

		// 9mm
		Array<string> wep_9mm;
		wep_9mm.push("MinervaChaingun");
		wep_9mm.push("HDSnubNoseRevolver");
		wep_9mm.push("TenMilAutoReloadingThingy");
		wep_9mm.push("HDStenMk2");
		wep_9mm.push("HushPuppyPistol");
		wep_9mm.push("HDHorseshoePistol");
		addammo('HDPistolAmmo', wep_9mm);
		
		// 9mm pistol magazines
		Array<string> wep_9mm15;
		wep_9mm15.push("HushPuppyPistol");
		wep_9mm15.push("HDHorseshoePistol");
		addammo('HD9mMag15', wep_9mm15);
		
		// 9mm smg magazines
		Array<string> wep_9mm30;
		wep_9mm30.push("MinervaChaingun");
		wep_9mm30.push("HDStenMk2");
		addammo('HD9mMag30', wep_9mm30);

		// 355
		Array<string> wep_355;
		wep_355.push("HDSnubNoseRevolver");
		addammo('HDRevolverAmmo', wep_355);

		// 45 ACP
		Array<string> wep_45acp;
		wep_45acp.push("HDColt1911");
		addammo('HD45ACPAmmo', wep_45acp);

		// 45 Long Colt
		Array<string> wep_45lc;
		wep_45lc.push("HDSingleActionRevolver");
		addammo('HD45LCAmmo', wep_45lc);

		// 45 Long Colt (gold)
		Array<string> wep_45lcgold;
		wep_45lcgold.push("HDGoldenSingleActionRevolver");
		addammo('HDGold45LCAmmo', wep_45lcgold);

		// 7mm Clips
		Array<string> wep_7mmClip;
		wep_7mmClip.push("ObrozzPistol");
		addammo('HD7mClip', wep_7mmClip);

		// 7mm
		Array<string> wep_7mm;
		wep_7mm.push("ObrozzPistol");
		addammo('SevenMilAmmo', wep_7mm);

		// 7mm Recast
		Array<string> wep_7mmR;
		wep_7mmR.push("ObrozzPistol");
		addammo('SevenMilAmmoRecast', wep_7mmR);

		// --------------------
		// Weapon/Item Spawns
		// --------------------

        // Note:
        // Anything that replaces items directly must have persistent 
        // spawns disabled to avoid them getting "transmogrified" in 
        // weird ways, like mags ejected when firing/reloading, or 
        // dumping the contents of a backpack.
        //
        // I changed most of the weapon spawners to replace ammoboxes and
        // spawn mags on shell pickups. I couldn't find any decent way to
        // spawn items on clip/mag spawns, so this is the best I could do.
        //
        //
        // -- Swampie
        
    // ----- Energy Weapons -----
        
		// Stun Gun
		Array<RTSpawnItemEntry> spawns_stungun;
		spawns_stungun.push(additementry('Lumberjack', stungun_spawn_bias));
		additem('HDStunGun', spawns_stungun, false);

		// Phazer Plasma Pistol
		Array<RTSpawnItemEntry> spawns_phazer;  
		spawns_phazer.push(additementry('HDAmBoxUnarmed', phazer_spawn_bias));
		additem('PhazerPistol', spawns_phazer, phazer_persistent_spawning);

		
		// Micro-Cells
		Array<RTSpawnItemEntry> spawns_microcell;
		spawns_microcell.push(additementry('ShellPickup', microcell_spawn_bias));
	    spawns_microcell.push(additementry('HDIEDPack', microcell_spawn_bias));
        spawns_microcell.push(additementry('HDIEDKits', microcell_spawn_bias));
		additem('HDMicroCell', spawns_microcell, microcell_persistent_spawning);

		// DM-93 Plasma Rifle
		Array<RTSpawnItemEntry> spawns_plasmabuster;  
		spawns_plasmabuster.push(additementry('Thunderbuster', pbuster_cpack_spawn_bias)); 
		additem('PlasmaBuster', spawns_plasmabuster, false);

    // ----- Pistols -----
        
		// Hush Puppy Silenced Pistol
		Array<RTSpawnItemEntry> spawns_hushpuppy;  
		spawns_HushPuppy.push(additementry('HDAmBoxUnarmed', hushpuppy_spawn_bias)); 
	    spawns_HushPuppy.push(additementry('HDAmBox', hushpuppy_spawn_bias)); 
		additem('HushPuppyPistol', spawns_hushpuppy,  hushpuppy_persistent_spawning);


		// Colt 1911 .45 Pistol
	//	Array<RTSpawnItemEntry> spawns_colt1911;  
	//	spawns_colt1911.push(additementry('HunterRandom', colt1911_spawn_bias)); 
	//	spawns_colt1911.push(additementry('HDPistol', colt1911_spawn_bias)); 
	//	additem('HDColt1911', spawns_colt1911,  colt1911_persistent_spawning);
	    
		// Colt 1911 Mags
		Array<RTSpawnItemEntry> spawns_colt1911_mags;
		spawns_colt1911_mags.push(additementry('ShellPickup', colt1911_mags_spawn_bias));
        spawns_colt1911_mags.push(additementry('HDIEDPack', colt1911_mags_spawn_bias));
        spawns_colt1911_mags.push(additementry('HDIEDKits', colt1911_mags_spawn_bias));
		additem('HDColtMag7', spawns_colt1911_mags, colt1911_persistent_spawning);
			    
		//Random ammobox spawns
		Array<RTSpawnItemEntry> spawns_colt1911_ammobox;
		spawns_colt1911_ammobox.push(additementry('HDAmBoxUnarmed', colt1911_ammobox_spawn_bias));
		spawns_colt1911_ammobox.push(additementry('HDAmBox', colt1911_ammobox_spawn_bias));
		additem('HDColt1911Spawn', spawns_colt1911_ammobox, colt1911_persistent_spawning);


		// Delta Elite spawns
		Array<RTSpawnItemEntry> spawns_10mm_pistol;
		spawns_10mm_pistol.push(additementry('HDAmBoxUnarmed', tenpis_handgun_spawn_bias));
        spawns_10mm_pistol.push(additementry('HDAmBox', tenpis_handgun_spawn_bias));
		additem('HD10mmPistol', spawns_10mm_pistol, tenpis_persistent_spawning);
		
		// Delta Elite Magazines
		Array<RTSpawnItemEntry> spawns_10mm_pistol_mags;
		spawns_10mm_pistol_mags.push(additementry('ShellPickup', tenpismag_cmag_spawn_bias));
		spawns_10mm_pistol_mags.push(additementry('HDIEDPack', tenpismag_cmag_spawn_bias));
        spawns_10mm_pistol_mags.push(additementry('HDIEDKits', tenpismag_cmag_spawn_bias));
		additem('HD10mMag8', spawns_10mm_pistol_mags, tenpis_persistent_spawning);
        

		// Obrozz Sawn-Off Boss Pistol
		Array<RTSpawnItemEntry> spawns_obrozz;
		spawns_obrozz.push(additementry('HDAmBoxUnarmed', obrozz_spawn_bias));
	    spawns_obrozz.push(additementry('HDAmBox', obrozz_spawn_bias));
		additem('ObrozzSpawner', spawns_obrozz, obrozz_persistent_spawning);
        

    // --- Revolvers ---

		// Detective Special
		Array<RTSpawnItemEntry> spawns_snose_pistol;
		spawns_snose_pistol.push(additementry('DeinoSpawn', snose_pistol_spawn_bias));	
		additem('SnubNoseSpawn', spawns_snose_pistol, snose_persistent_spawning);


		// Single-Action Revolver
	//	Array<RTSpawnItemEntry> spawns_sixgun;
	//	spawns_sixgun.push(additementry('HDHandgunRandomDrop', sa_pistol_spawn_bias));
	//	spawns_sixgun.push(additementry('HDPistol', sa_pistol_spawn_bias));
	//	additem('HDSingleActionRevolver', spawns_sixgun, sa_persistent_spawning);
        
        Array<RTSpawnItemEntry> spawns_sixgun_bundle;
		spawns_sixgun_bundle.push(additementry('DeinoSpawn', sa_bundle_spawn_bias));
		additem('SADeinoSpawn', spawns_sixgun_bundle, sa_persistent_spawning);


		// Gold Single-Action
		Array<RTSpawnItemEntry> spawns_goldengun;
		spawns_goldengun.push(additementry('DeinoSpawn', gsa_pistol_spawn_bias));
		additem('GoldSADeinoSpawn', spawns_goldengun, gsa_persistent_spawning);


    // ----- Shotguns -----

		// Ithaca M37 Combat Shotgun
		Array<RTSpawnItemEntry> spawns_combatshotgun;
		spawns_combatshotgun.push(additementry('HunterRandom', cshotgun_shotgun_spawn_bias));
		additem('HDCombatShotgunRandom', spawns_combatshotgun, cshotgun_persistent_spawning);


		// Doomed Shotgun
		Array<RTSpawnItemEntry> spawns_doomedshotgun;
		spawns_doomedshotgun.push(additementry('HunterRandom', dHunt_shotgun_spawn_bias));
		additem('DoomHunterRandom', spawns_doomedshotgun, dHunt_persistent_spawning);


		// Less-Lethal Shotgun
		Array<RTSpawnItemEntry> spawns_llshotgun;
		spawns_llshotgun.push(additementry('HunterRandom', llh_shotgun_spawn_bias));
		additem('LLHunter', spawns_llshotgun, llh_persistent_spawning);


		// Explosive Shotgun
		Array<RTSpawnItemEntry> spawns_exshotgun;
		spawns_exshotgun.push(additementry('HunterRandom', esg_shotgun_spawn_bias));
		additem('ExplosiveHunter', spawns_exshotgun, esg_persistent_spawning);


		// Plastic Flaregun
		Array<RTSpawnItemEntry> spawns_flaregun_plastic; 
		spawns_flaregun_plastic.push(additementry("Hunter", fl_weapon_spawn_bias)); 
		spawns_flaregun_plastic.push(additementry("Slayer", fl_weapon_spawn_bias)); 
		additem("WildFlareGun", spawns_flaregun_plastic, fl_weapon_persistent_spawning, false); 

		// Metal Flaregun
		Array<RTSpawnItemEntry> spawns_flaregun_metal; 
		spawns_flaregun_metal.push(additementry("Hunter", fl_metal_spawn_bias));
		spawns_flaregun_metal.push(additementry("Slayer", fl_metal_spawn_bias));
		additem("WildMetalFlareGun", spawns_flaregun_metal, fl_metal_persistent_spawning, false);


    // ----- Automatic Weapons -----

		// M-211 Sigcow
		Array<RTSpawnItemEntry> spawns_sigcow;
		spawns_sigcow.push(additementry('HDAmBoxUnarmed', sigcow_cbox_spawn_bias));
        spawns_sigcow.push(additementry('HDAmBox', sigcow_cbox_spawn_bias));
		additem('SigCowRandomSpawn', spawns_sigcow, sigcow_persistent_spawning);
		
		// Sigcow Magazines
		Array<RTSpawnItemEntry> spawns_sigcow_mags;
		spawns_sigcow_mags.push(additementry('ShellPickup', sigcow_cbox_spawn_bias));
        spawns_sigcow_mags.push(additementry('HDIEDPack', sigcow_cbox_spawn_bias));
        spawns_sigcow_mags.push(additementry('HDIEDKits', sigcow_cbox_spawn_bias));
		additem('HD10mMag25', spawns_sigcow_mags, sigcow_persistent_spawning);

		// Hacked ZM66
		Array<RTSpawnItemEntry> spawns_hackedzm66random;
		spawns_hackedzm66random.push(additementry('HDAmBoxUnarmed', hacked_zm66_spawn_bias));
        spawns_hackedzm66random.push(additementry('HDAmBox', hacked_zm66_spawn_bias));
		additem('HackedZM66Random', spawns_hackedzm66random, hacked_persistent_spawning);


		// STEN Mk. 2(S)
		Array<RTSpawnItemEntry> spawns_sten;  
		spawns_sten.push(additementry('HDSMGRandom', sten_spawn_bias));
		spawns_sten.push(additementry('HDAmBoxUnarmed', sten_ammobox_spawn_bias));
        spawns_sten.push(additementry('HDAmBox', sten_ammobox_spawn_bias));
		additem('HDSTENRandom', spawns_sten,  sten_persistent_spawning);  


		// Minerva
		Array<RTSpawnItemEntry> spawns_minerva;
		spawns_minerva.push(additementry('Vulcanette', minerva_chaingun_spawn_bias));
		additem('MinervaRandom', spawns_minerva, false);
        
        Array<RTSpawnItemEntry> spawns_minerva_smg;
        spawns_minerva_smg.push(additementry('HDSMGRandom', minerva_smg_spawn_bias));
		additem('MinervaRandom', spawns_minerva_smg, minerva_persistent_spawning);


    // ----- Explosives -----

		// Single bits of Dynamite
		Array<RTSpawnItemEntry> spawns_dynamite;  
		spawns_dynamite.push(additementry('HDRocketAmmo', dynamite_spawn_bias)); 
		spawns_dynamite.push(additementry('HDFragP', dynamite_spawn_bias)); 
		additem('HDDynamiteAmmo', spawns_dynamite, false);
	    
	    
	    // Dynamite Packs
		Array<RTSpawnItemEntry> spawns_dynamitebundle;  
		spawns_dynamitebundle.push(additementry('RocketBigPickup', dynamite_spawn_bias)); 
		additem('HDDynamitePickup', spawns_dynamitebundle, dynamite_persistent_spawning);


		// Frag Cannon
		Array<RTSpawnItemEntry> spawns_fragcannon;  
		spawns_fragcannon.push(additementry('RocketBigPickup', fragcannon_spawn_bias));
		additem('FragCannonPickup', spawns_fragcannon, fragcannon_persistent_spawning);


/*  tried something, didn't work, maybe fix later??

		// 'Juan' Horseshoe Pistol
		Array<RTSpawnItemEntry> spawns_juan;
		spawns_juan.push(additementry('HDHandgunRandomDrop', ja_weapon_drop_chance_bias));
		spawns_juan.push(additementry('HDPistol', ja_weapon_drop_chance_bias));
		additem('HDHorseShoePistol', spawns_juan, ja_persistent_spawning);
*/

	}
	
	// Random stuff, stores it and forces negative values just to be 0.
	bool giverandom(int chance)
	{
		bool result = false;
		int iii = random(0, chance);
		if(iii < 0)
			iii = 0;
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	// Tries to create the item via random spawning.
	bool trycreateitem(worldevent e, RTSpawnItem f, int g, bool rep)
	{
		bool result = false;
		if(giverandom(f.spawnreplaces[g].chance))
		{
			vector3 spawnpos = e.thing.pos;
			let spawnitem = Actor.Spawn(f.spawnname, (spawnpos.x, spawnpos.y, spawnpos.z));
			if(spawnitem)
			{
				if(rep)
				{
					e.thing.destroy();
					result = true;
				}
			}

		}
		return result;
	}
	
	override void worldthingspawned(worldevent e)
	{
		string candidatename;
		
		// loop controls.
		int i, j;
		bool isAmmo = false;

		
		// Populates the main arrays if they haven't been already. 
		if(!cvarsAvailable)
			init();
		
		
		for(i = 0; i < blacklist.size(); i++)
		{
			if (e.thing is blacklist[i])
				return;
		}
		
		// Checks for null events. 
		if(!e.Thing)
		{
			return;
		}

		candidatename  = e.Thing.GetClassName();
		candidatename = candidatename.makelower();
		
		// Pointers for specific classes.
		let ammo_ptr   = HDAmmo(e.Thing);
		
		// Whether or not an item can use this.
		if(ammo_ptr)
		{
			// Goes through the entire ammospawn array.
			for(i = 0; i < ammospawnlistsize; i++)
			{
				if(candidatename == ammospawnlist[i].ammoname)
				{
					// Appends each entry in that ammo's subarray.
					for(j = 0; j < ammospawnlist[i].weaponnamessize; j++)
					{
						// Actual pushing to itemsthatusethis().
						if(ammo_ptr)
							ammo_ptr.ItemsThatUseThis.Push(ammospawnlist[i].weaponnames[j]);
					}
				}
			}
		}
		
		//Do this AFTER pushing ItemsThatUseThis()
		//or ammo purging gets messed up lol
		
		// Return if range.
        if(level.MapName ~== "RANGE")
        {
                return;
        }
				
				
		// Iterates through the list of item candidates for e.thing.
		for(i = 0; i < itemspawnlistsize; i++)
		{
			// Tries to cast the item as an inventory. 
			let thing_inv_ptr = Inventory(e.thing);
		
			// Checks if the item in question is owned.
			bool owned    = thing_inv_ptr && (thing_inv_ptr.owner);

			// Checks if the level has been loaded more than 1 tic.
			bool prespawn = !(level.maptime > 1);
			
			// Checks if persistent spawning is on.
			bool persist  = (itemspawnlist[i].isPersistent);
			
			// if an item is owned or is an ammo (doesn't retain owner ptr), 
			// do not replace it. 
			if ((prespawn || persist) && (!owned && (!ammo_ptr || prespawn)))
			{
				int original_i = i;
				for(j = 0; j < itemspawnlist[original_i].spawnreplacessize; j++)
				{
					if(itemspawnlist[i].spawnreplaces[j].name == candidatename)
					{
						if(trycreateitem(e, itemspawnlist[i], j, itemspawnlist[i].replaceitem))
						{
							j = itemspawnlist[i].spawnreplacessize;
							i = itemspawnlistsize;
						}
					}
				}
			}
		}
	}
}

// Juan Handler

class JuanEvent : EventHandler
{
	private bool cvarsAvailable;
	private int weaponSpawnBiasActual;
	private int magSpawnBiasActual;
	private int autoSpawnBiasActual;
	private int weaponDropBiasActual;

	// Shoves cvar values into their non-cvar shaped holes.
	// I have no idea why names for cvars become reserved here.
	// But, this works. So no complaints. 
	void init()
	{
		cvarsAvailable = true;
		weaponSpawnBiasActual = ja_weapon_spawn_bias;
		magSpawnBiasActual    = ja_mag_spawn_bias;
		autoSpawnBiasActual   = ja_firemode_chance_bias;
		weaponDropBiasActual  = ja_weapon_drop_chance_bias;
	}

	// 'Initalizes' the event handler,
	// In my testing, this is called after events are fired. 
	override void WorldLoaded(WorldEvent e)
	{
		// always calls init.
		init();
		super.WorldLoaded(e);
	}

	bool giverandom(int chance)
	{
		bool result = false;
		
		// temp storage for the random value. 
		int iii = random(0, chance);
		
		// force negative values to be 0. 
		if(iii < 0)
			iii = 0;
			
		
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	// Handles 'item propegation'. Woo, fancy. 
	override void CheckReplacement(ReplaceEvent e)
	{
		// Makes sure the values are always loaded before
		// taking in replaceevents. 
		if(!cvarsAvailable)
			init();
		
		// Don't replace if it's final, or doesn't exist. 
		if (!e.Replacement || e.IsFinal)
		{
			return;
		}
		
		switch(e.Replacement.GetClassName())
		{
			case 'HDHandgunRandomDrop':
			case 'PepperPistolReplacer':
				// dirty inverted logic gate for spawn drops. 
				if (random(0, weaponDropBiasActual) || weaponDropBiasActual == -1)
				{
					break;
				}
			case 'HDPistol':
				{
					
					if(giverandom(weaponSpawnBiasActual))
					{
						if(giverandom(autoSpawnBiasActual))
						{
							e.Replacement = "HDHorseShoePistolAuto";
						}
						else
						{
							e.Replacement = "HDHorseShoePistol";
						}
					}
					break;
				}
			case 'HD9mMag15':
				if(giverandom(magSpawnBiasActual))
				{
					e.Replacement = "HDHorseshoe9m"; 
				}
				break;
		}
		
	}
}

// Wild flaregun spawns; mostly self explanatory. 
class WildFlareGun : IdleDummy
{
	class<hdweapon> weaponToSpawn;
	property weaponToSpawn : weaponToSpawn;
	
	default
	{
		wildflaregun.weaponToSpawn 'FireBlooper';
	}
	
	states
	{
		Spawn:
			TNT1 A 0 NODELAY
			{
				if(weaponToSpawn != "none")
				{
					let weapon = Actor.Spawn(invoker.weaponToSpawn, (invoker.pos.x, invoker.pos.y, invoker.pos.z + 5));
					weapon.vel.x += frandom[huminahumina](-2,2);
					weapon.vel.y += frandom[huminahumina](-2,2);
					weapon.vel.z += frandom[huminahumina](1,2);
				}
				
				let ammo = HDFlareAmmo(Actor.Spawn("HDFlareAmmo", (invoker.pos.x, invoker.pos.y, invoker.pos.z + 5)));
				ammo.vel.x += frandom[huminahumina](-2,2);
				ammo.vel.y += frandom[huminahumina](-2,2);
				ammo.vel.z += frandom[huminahumina](1,2);
				ammo.amount += random(2,5);
			}
			stop;
	}
}

class WildMetalFlareGun : WildFlareGun
{
	
	default
	{
		wildflaregun.weaponToSpawn 'MetalFireBlooper';
	}
}

// only spawns the ammo (used for spawning ontop of shellpickups). 
class HDFlareAmmoRandom : WildFlareGun
{
	
	default
	{
		wildflaregun.weaponToSpawn "none";
	}
}
