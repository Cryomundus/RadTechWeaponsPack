//////////////////////////////////////////////////////////////////////
//                                                                  //
//  credits to FDA for coding the RadTech weapon spawner framework  //
//                                                                  //
//////////////////////////////////////////////////////////////////////



// Struct for itemspawn information. 
class RTSpawnItem play
{
	string    		           spawnname;            // ID by string for spawner
	Array<RTSpawnItemEntry>    spawnreplaces;        // ID by string for spawnees
	int 	                   spawnreplacessize;    // Cached size of the above array
	bool                       isPersistent;         // Whether or not to persistently spawn.
	bool					   replaceitem;
}

class RTSpawnItemEntry play
{
	string name;
	int    chance;
}

// Struct for passing useinformation to ammunition. 
class RTSpawnAmmo play
{
	string		  ammoname;		   // ID by string for the header ammo.
	Array<string> weaponnames;     // ID by string for weapons using that ammo.
	int           weaponnamessize; // Cached size of the above array
}



// One handler to rule them all. 
class RadTechHandler : EventHandler
{

	// List of persistent classes to completely ignore. 
	// This -should- mean this mod has no performance impact. 
	static const class<actor> blacklist[] =
	{
		"HDSmoke",
		"BloodTrail",
		"CheckPuff",
		"WallChunk",
		"HDBulletPuff",
		"HDFireballTail",
		"ReverseImpBallTail",
		"HDSmokeChunk",
		"ShieldSpark",
		"HDFlameRed",
		"HDMasterBlood",
		"PlantBit",
		"HDBulletActor",
		"HDLadderSection"
	};

	// List of weapon-ammo associations.
	// Used for ammo-use association on ammo spawn (happens very often). 
	array<RTSpawnAmmo> ammospawnlist;
	int ammospawnlistsize;
	
	// List of item-spawn associations.
	// used for item-replacement on mapload. 
	array<RTSpawnItem> itemspawnlist;
	int itemspawnlistsize;
	
	
	// appends an entry to itemspawnlist;
	void additem(string name, Array<RTSpawnItemEntry> replacees, bool persists, bool rep=true)
	{
		// Creates a new struct;
		RTSpawnItem spawnee = RTSpawnItem(new('RTSpawnItem'));
		
		// Populates the struct with relevant information,
		spawnee.spawnname = name;
		spawnee.isPersistent = persists;
		spawnee.replaceitem = rep;
		for(int i = 0; i < replacees.size(); i++)
		{
			spawnee.spawnreplaces.push(replacees[i]);
			spawnee.spawnreplacessize++;
		}
		
		// Pushes the finished struct to the array. 
		itemspawnlist.push(spawnee);
		itemspawnlistsize++;
	}


	RTSpawnItemEntry additementry(string name, int chance)
	{
		// Creates a new struct;
		RTSpawnItemEntry spawnee = RTSpawnItemEntry(new('RTSpawnItemEntry'));
		spawnee.name = name.makelower();
		spawnee.chance = chance;
		return spawnee;
		
	}


	// appends an entry to ammospawnlist;
	void addammo(string name, Array<string> weapons)
	{
	
		// Creates a new struct;
		RTSpawnAmmo spawnee = RTSpawnAmmo(new('RTSpawnAmmo'));
		spawnee.ammoname = name;
		
		// Populates the struct with relevant information,
		for(int i = 0; i < weapons.size(); i++)
		{
			spawnee.weaponnames.push(weapons[i].makelower());
			spawnee.weaponnamessize++;
		}
		
		// Pushes the finished struct to the array. 
		ammospawnlist.push(spawnee);
		ammospawnlistsize++;
	}
	
	
	bool cvarsAvailable;
	
	
	
	// Populates the replacement and association arrays. 
	void init()
	{
		cvarsAvailable = true;
		
//this looks like the important part

//  Plasma Buster

		// Item spawn lists.
		Array<RTSpawnItemEntry> spawns_plasmabuster;  //name of weapon spawner
		spawns_plasmabuster.push(additementry('HDBattery', pbuster_cpack_spawn_bias));  //name of replacee
		spawns_plasmabuster.push(additementry('ThunderBuster', pbuster_cpack_spawn_bias));  //name of replacee

		// Ammo lists.
		Array<string> wep_pbuster;  
		wep_pbuster.push("PlasmaBuster");  //name of weapon being added

		// Actual add commands.
		additem('PlasmaBuster', spawns_plasmabuster, pbuster_persistent_spawning);      //weapon replacer
		addammo('HDBattery', wep_pbuster);  //adds to ammo whitelist


// Flare Guns

		// Ammo lists.
		
		Array<string> wep_fguns;  
		wep_fguns.push("FireBlooper");  //name of weapon being added
		wep_fguns.push("MetalFireBlooper");  //name of weapon being added
		
		// Actual add commands.
		addammo('HDShellAmmo', wep_fguns);  //adds to ammo whitelist

		// Plastic Flaregun
		Array<RTSpawnItemEntry> spawns_flaregun_plastic;  //name of weapon spawner
		spawns_flaregun_plastic.push(additementry("Hunter",              fl_weapon_spawn_bias));  //name of replacee
		spawns_flaregun_plastic.push(additementry("Slayer",              fl_weapon_spawn_bias));  //name of replacee
		spawns_flaregun_plastic.push(additementry('HDHandgunRandomDrop', fl_weapon_drop_chance_bias));
		additem("WildFlareGun", spawns_flaregun_plastic, fl_weapon_persistent_spawning, false);      //weapon replacer

		// Metal Flaregun
		Array<RTSpawnItemEntry> spawns_flaregun_metal;  //name of weapon spawner
		spawns_flaregun_metal.push(additementry("Hunter",              fl_metal_spawn_bias));  //name of replacee
		spawns_flaregun_metal.push(additementry("Slayer",            fl_metal_spawn_bias));  //name of replacee
		spawns_flaregun_metal.push(additementry('HDHandgunRandomDrop', fl_metal_drop_chance_bias));
		additem("WildMetalFlareGun", spawns_flaregun_metal, fl_metal_persistent_spawning, false);      //weapon replacer


		// Flaregun ammo (boxed)
		Array<RTSpawnItemEntry> spawns_flaregun_ammob;  //name of weapon spawner
		spawns_flaregun_ammob.push(additementry("ShellBoxPickup", fl_box_spawn_bias));  //name of replacee
		additem("FlareShellBoxPickup", spawns_flaregun_ammob, false, false);

		// Flaregun ammo (loose)
		Array<RTSpawnItemEntry> spawns_flaregun_ammoa;  //name of weapon spawner
		spawns_flaregun_ammoa.push(additementry("ShellPickup", fl_flare_spawn_bias));  //name of replacee
		additem('HDFlareAmmoRandom', spawns_flaregun_ammoa, false, false);



//  M-211 Sig-Cow 10mm Rifle

  //Random SigCow spawns
		Array<RTSpawnItemEntry> spawns_sigcow;
		spawns_sigcow.push(additementry('ClipBoxPickup', sigcow_cbox_spawn_bias));

		additem('SigCowRandomSpawn', spawns_sigcow, sigcow_persistent_spawning);
		
  //Random mag spawns
    Array<RTSpawnItemEntry> spawns_sigcow_mags;
		spawns_sigcow_mags.push(additementry('Clip', sigcow_cbox_spawn_bias));

		additem('HD10mMag25', spawns_sigcow_mags, sigcow_persistent_spawning);
		


//  Delta Elite 10mm Pistol


  //Random pistol drops

		Array<RTSpawnItemEntry> spawns_10mm_pistol;
		spawns_10mm_pistol.push(additementry('HDHandgunRandomDrop', tenpis_handgun_spawn_bias));

		additem('HDTenMilRandomDrop', spawns_10mm_pistol, tenpis_persistent_spawning);
		
  //Random mag spawns

    Array<RTSpawnItemEntry> spawns_10mm_pistol_mags;
		spawns_10mm_pistol_mags.push(additementry('Clip', tenpismag_cmag_spawn_bias));

		additem('HD10mMag8', spawns_10mm_pistol_mags, tenpismag_persistent_spawning);



//  Hacked ZM66 Assault Rifle

    Array<RTSpawnItemEntry> spawns_hackedzm66;
		spawns_hackedzm66.push(additementry('ZM66Random', hacked_zm66_spawn_bias));
		
		Array<string> wep_hackedzm66;
		wep_hackedzm66.push("HackedZM66AssaultRifle");

		additem('HackedZM66Random', spawns_hackedzm66, hacked_persistent_spawning);

  //adding to ammo whitelist
		addammo('HD4mMag', wep_hackedzm66);
    addammo('HDRocketAmmo', wep_hackedzm66);
    addammo('FourMilAmmo', wep_hackedzm66);



//  Minerva 9mm Chaingun

    Array<RTSpawnItemEntry> spawns_minerva;
		spawns_minerva.push(additementry('ChaingunReplaces', minerva_chaingun_spawn_bias));
    spawns_minerva.push(additementry('HDSMGRandom', minerva_smg_spawn_bias));
		
		Array<string> wep_minerva;
		wep_minerva.push("MinervaChaingun");

		additem('MinervaRandom', spawns_minerva, minerva_persistent_spawning);

  //adding to ammo whitelist
		addammo('HD9mMag30', wep_minerva);
    addammo('HDBattery', wep_minerva);
    addammo('HDPistolAmmoAmmo', wep_minerva);



//  Combat Shotgun

    Array<RTSpawnItemEntry> spawns_combatshotgun;
		spawns_combatshotgun.push(additementry('HunterRandom', cshotgun_shotgun_spawn_bias));
		
		Array<string> wep_combatshotgun;
		wep_combatshotgun.push("HDCombatShotgun");

		additem('HDCombatShotgunRandom', spawns_combatshotgun, cshotgun_persistent_spawning);

  //adding to ammo whitelist
		addammo('HDShellAmmo', wep_combatshotgun);



// Doomed Shotgun  

    Array<RTSpawnItemEntry> spawns_doomedshotgun;
		spawns_doomedshotgun.push(additementry('HunterRandom', dHunt_shotgun_spawn_bias));
		
		Array<string> wep_doomedshotgun;
		wep_doomedshotgun.push("DoomHunter");

		additem('DoomHunterRandom', spawns_doomedshotgun, dHunt_persistent_spawning);

		addammo('HDShellAmmo', wep_doomedshotgun);



// Less Lethal Shotgun  

  //Random map spawns
    Array<RTSpawnItemEntry> spawns_llshotgun;
		spawns_llshotgun.push(additementry('HunterRandom', llh_shotgun_spawn_bias));
		
		Array<string> wep_llshotgun;
		wep_llshotgun.push("LLHunter");

		additem('LLHunter', spawns_llshotgun, llh_persistent_spawning);

  //Random shellbox spawns
  Array<RTSpawnItemEntry> spawns_llshotgun_shellbox;
		spawns_llshotgun_shellbox.push(additementry('ShellBoxRandom', llhs_box_spawn_bias));
		
		additem('LLShellBoxPickup', spawns_llshotgun_shellbox, llh_persistent_spawning);

  //Random shell spawns
  Array<RTSpawnItemEntry> spawns_llshotgun_shells;
		spawns_llshotgun_shells.push(additementry('ShellRandom', llhs_shell_spawn_bias));
		
		additem('HDLLShellAmmo', spawns_llshotgun_shells, llh_persistent_spawning);



// Explosive Shotgun  

  //Random map spawns
    Array<RTSpawnItemEntry> spawns_exshotgun;
		spawns_exshotgun.push(additementry('HunterRandom', esg_shotgun_spawn_bias));
		
		Array<string> wep_exshotgun;
		wep_exshotgun.push("ExplosiveHunter");

		additem('ExplosiveHunter', spawns_exshotgun, esg_persistent_spawning);

  //Random shellbox spawns
  Array<RTSpawnItemEntry> spawns_exshotgun_shellbox;
		spawns_exshotgun_shellbox.push(additementry('ShellBoxRandom', esgs_box_spawn_bias));
		
		additem('ExplosiveShellBoxPickup', spawns_exshotgun_shellbox, esg_persistent_spawning);

  //Random shell spawns
  Array<RTSpawnItemEntry> spawns_exshotgun_shells;
		spawns_exshotgun_shells.push(additementry('ShellRandom', esgs_shell_spawn_bias));
		
		additem('HDExplosiveShellAmmo', spawns_exshotgun_shells, esg_persistent_spawning);



//  Detective Special

  //Random pistol drops
    Array<RTSpawnItemEntry> spawns_snose_pistol;

		spawns_snose_pistol.push(additementry('HDHandgunRandomDrop', snose_pistol_spawn_bias));

		Array<string> wep_snose_pistol;
		wep_snose_pistol.push("HDSnubNoseRevolver");

		additem('HDSnubNoseRevolver', spawns_snose_pistol, snose_persistent_spawning);
  
  //Random map spawns
    Array<RTSpawnItemEntry> spawns_snose_pistol_map;

		spawns_snose_pistol_map.push(additementry('DeinoSpawn', snose_pistol_spawn_bias));
		
		additem('SnubNoseSpawn', spawns_snose_pistol_map, snose_persistent_spawning);

  //adding to ammo whitelist
    addammo('HDRevolverAmmo', wep_snose_pistol);
    addammo('HDPistolAmmo', wep_snose_pistol);



//  Single Action Revolver

  //Random pistol drops
    Array<RTSpawnItemEntry> spawns_sixgun;
		spawns_sixgun.push(additementry('HDHandgunRandomDrop', sa_pistol_spawn_bias));

		additem('HDSingleActionRevolver', spawns_sixgun, sa_persistent_spawning);

  //Random map spawns
    Array<RTSpawnItemEntry> spawns_sixgun_map;
		spawns_sixgun_map.push(additementry('ClipBoxPickup', sa_pistol_spawn_bias));

		additem('SASpawn', spawns_sixgun_map, sa_persistent_spawning);



//  Golden Gun

  //Random pistol drops
    Array<RTSpawnItemEntry> spawns_goldengun;
		spawns_goldengun.push(additementry('HDHandgunRandomDrop', gsa_pistol_spawn_bias));

		additem('HDGoldenSingleActionRevolver', spawns_goldengun, gsa_persistent_spawning);

  //Random map spawns
    Array<RTSpawnItemEntry> spawns_goldengun_map;
		spawns_goldengun_map.push(additementry('ClipBoxPickup', gsa_pistol_spawn_bias));

		additem('GoldSASpawn', spawns_goldengun_map, gsa_persistent_spawning);



	}
	
//fill above with entries for each weapon

	
	// Random stuff, stores it and forces negative values just to be 0.
	bool giverandom(int chance)
	{
		bool result = false;
		int iii = random(0, chance);
		if(iii < 0)
			iii = 0;
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}



	// Tries to create the item via random spawning.
	bool trycreateitem(worldevent e, RTSpawnItem f, int g, bool rep)
	{
		bool result = false;
		if(giverandom(f.spawnreplaces[g].chance))
		{
			vector3 spawnpos = e.thing.pos;
			let spawnitem = Actor.Spawn(f.spawnname, (spawnpos.x, spawnpos.y, spawnpos.z));
			if(spawnitem)
			{
				if(rep)
				{
					e.thing.destroy();
					result = true;
				}
			}

		}
		return result;
	}
	
	
	override void worldthingspawned(worldevent e)
	 {
		string candidatename;
		
		// loop controls.
		int i, j;
		bool isAmmo = false;
		
		// Populates the main arrays if they haven't been already. 
		if(!cvarsAvailable)
			init();
		
		
		for(i = 0; i < blacklist.size(); i++)
		{
			if (e.thing is blacklist[i])
				return;
		}
		
		// Checks for null events. 
		if(!e.Thing)
		{
			return;
		}

		candidatename  = e.Thing.GetClassName();
		candidatename = candidatename.makelower();
		let ammo_ptr   = HDAmmo(e.Thing);
		
		if(ammo_ptr)
		{
			for(i = 0; i < ammospawnlistsize; i++)
			{
				if(candidatename == ammospawnlist[i].ammoname)
				{
					for(j = 0; j < ammospawnlist[i].weaponnamessize; j++)
					{
						ammo_ptr.ItemsThatUseThis.Push(ammospawnlist[i].weaponnames[j]);
					}
				}
			}
		}
		
		

				
		// Iterates through the list of item candidates for e.thing.
		for(i = 0; i < itemspawnlistsize; i++)
		{
			// Tries to cast the item as an inventory. 
			let thing_inv_ptr = Inventory(e.thing);
		
			// Checks if the item in question is owned.
			bool owned    = thing_inv_ptr && (thing_inv_ptr.owner);

			// Checks if the level has been loaded more than 1 tic.
			bool prespawn = !(level.maptime > 1);
			
			// Checks if persistent spawning is on.
			bool persist  = (itemspawnlist[i].isPersistent);
			
			
			
			// if an item is owned or is an ammo (doesn't retain owner ptr), 
			// do not replace it. 
			if ((prespawn || persist) && (!owned && (!ammo_ptr || prespawn)))
			{
				int original_i = i;
				for(j = 0; j < itemspawnlist[original_i].spawnreplacessize; j++)
				{
					if(itemspawnlist[i].spawnreplaces[j].name == candidatename)
					{
						if(trycreateitem(e, itemspawnlist[i], j, itemspawnlist[i].replaceitem))
						{
							j = itemspawnlist[i].spawnreplacessize;
							i = itemspawnlistsize;
						}
					}
				}
			}
		}
	}
}
